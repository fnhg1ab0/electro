package com.electro.Minh;

import com.electro.TestSecurityConfig;
import com.electro.controller.client.ClientCategoryController;
import com.electro.config.security.WebSecurityConfig;
import com.electro.dto.client.ClientCategoryResponse;
import com.electro.entity.product.Category;
import com.electro.mapper.client.ClientCategoryMapper;
import com.electro.repository.product.CategoryRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.FilterType;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Collections;
import java.util.Optional;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * L·ªõp test cho ClientCategoryController.
 * S·ª≠ d·ª•ng WebMvcTest ƒë·ªÉ test layer controller m√† kh√¥ng c·∫ßn kh·ªüi ƒë·ªông to√†n b·ªô ·ª©ng d·ª•ng.
 */
@WebMvcTest(controllers = ClientCategoryController.class, excludeFilters = {
        @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = WebSecurityConfig.class)
})
@Import(TestSecurityConfig.class)
class ClientCategoryControllerTest {

    @Autowired
    private MockMvc mockMvc; // MockMvc ƒë·ªÉ th·ª±c hi·ªán c√°c y√™u c·∫ßu HTTP gi·∫£ l·∫≠p

    @Autowired
    private ObjectMapper objectMapper; // ObjectMapper ƒë·ªÉ chuy·ªÉn ƒë·ªïi object sang JSON v√† ng∆∞·ª£c l·∫°i

    @MockBean
    private CategoryRepository categoryRepository; // Mock repository ƒë·ªÉ gi·∫£ l·∫≠p truy v·∫•n database

    @MockBean
    private ClientCategoryMapper clientCategoryMapper; // Mock mapper ƒë·ªÉ gi·∫£ l·∫≠p √°nh x·∫° entity sang DTO

    @MockBean
    private UserDetailsService userDetailsService; // Mock UserDetailsService cho security

    // ============================
    // üü¢ Positive Test Cases
    // ============================

    /**
     * Test l·∫•y t·∫•t c·∫£ categories th√†nh c√¥ng.
     * Ki·ªÉm tra response tr·∫£ v·ªÅ status 200 v√† content type JSON.
     *
     * @throws Exception n·∫øu c√≥ l·ªói trong qu√° tr√¨nh test
     */
    @Test
    @WithMockUser(username = "testuser", authorities = {"CUSTOMER"})
    void testGetAllCategories_Success() throws Exception {
        // Arrange - Chu·∫©n b·ªã d·ªØ li·ªáu gi·∫£ l·∫≠p
        Category category = new Category();
        ClientCategoryResponse response = new ClientCategoryResponse();

        // Mock h√†nh vi c·ªßa repository v√† mapper
        when(categoryRepository.findByParentCategoryIsNull())
                .thenReturn(Collections.singletonList(category));
        when(clientCategoryMapper.entityToResponse(Collections.singletonList(category), 3))
                .thenReturn(Collections.singletonList(response));

        // Act & Assert - Th·ª±c hi·ªán request v√† ki·ªÉm tra k·∫øt qu·∫£
        mockMvc.perform(get("/client-api/categories"))
                .andExpect(status().isOk()) // Ki·ªÉm tra status 200
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)); // Ki·ªÉm tra content type
    }

    /**
     * Test l·∫•y category theo slug th√†nh c√¥ng.
     * Ki·ªÉm tra response tr·∫£ v·ªÅ status 200 v√† content type JSON.
     *
     * @throws Exception n·∫øu c√≥ l·ªói trong qu√° tr√¨nh test
     */
    @Test
    @WithMockUser(username = "testuser", authorities = {"CUSTOMER"})
    void testGetCategoryBySlug_Success() throws Exception {
        // Arrange
        String slug = "test-slug";
        Category category = new Category();
        ClientCategoryResponse response = new ClientCategoryResponse();

        // Mock h√†nh vi t√¨m ki·∫øm theo slug
        when(categoryRepository.findBySlug(slug))
                .thenReturn(Optional.of(category));
        when(clientCategoryMapper.entityToResponse(category, false))
                .thenReturn(response);

        // Act & Assert
        mockMvc.perform(get("/client-api/categories/{slug}", slug))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON));
    }

    /**
     * Test l·∫•y t·∫•t c·∫£ categories khi database r·ªóng.
     * Ki·ªÉm tra response tr·∫£ v·ªÅ danh s√°ch r·ªóng v·ªõi status 200.
     *
     * @throws Exception n·∫øu c√≥ l·ªói trong qu√° tr√¨nh test
     */
    @Test
    @WithMockUser(username = "testuser", authorities = {"CUSTOMER"})
    void testGetAllCategories_EmptyList_Success() throws Exception {
        // Arrange
        when(categoryRepository.findByParentCategoryIsNull())
                .thenReturn(Collections.emptyList());
        when(clientCategoryMapper.entityToResponse(Collections.emptyList(), 3))
                .thenReturn(Collections.emptyList());

        // Act & Assert
        mockMvc.perform(get("/client-api/categories"))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(content().json("{\"content\":[],\"totalElements\":0}")); // ƒêi·ªÅu ch·ªânh k·ª≥ v·ªçng
    }

    /**
     * Test l·∫•y category theo slug v√† ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ ƒë√∫ng.
     * Ki·ªÉm tra response tr·∫£ v·ªÅ status 200 v√† content type JSON.
     *
     * @throws Exception n·∫øu c√≥ l·ªói trong qu√° tr√¨nh test
     */
    @Test
    @WithMockUser(username = "testuser", authorities = {"CUSTOMER"})
    void testGetCategoryBySlug_ReturnCorrectData_Success() throws Exception {
        // Arrange
        String slug = "electronics";
        Category category = new Category();
        ClientCategoryResponse expectedResponse = new ClientCategoryResponse();

        when(categoryRepository.findBySlug(slug))
                .thenReturn(Optional.of(category));
        when(clientCategoryMapper.entityToResponse(category, false))
                .thenReturn(expectedResponse);

        // Act & Assert
        mockMvc.perform(get("/client-api/categories/{slug}", slug))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON));
    }

    // ============================
    // üî¥ Negative Test Cases
    // ============================

    /**
     * Test l·∫•y category v·ªõi slug kh√¥ng t·ªìn t·∫°i.
     * Ki·ªÉm tra response tr·∫£ v·ªÅ status 404 Not Found.
     *
     * @throws Exception n·∫øu c√≥ l·ªói trong qu√° tr√¨nh test
     */
    @Test
    @WithMockUser(username = "testuser", authorities = {"CUSTOMER"})
    void testGetCategoryBySlug_NotFound() throws Exception {
        // Arrange
        String slug = "non-existent-slug";

        when(categoryRepository.findBySlug(slug))
                .thenReturn(Optional.empty()); // Mock kh√¥ng t√¨m th·∫•y category

        // Act & Assert
        mockMvc.perform(get("/client-api/categories/{slug}", slug))
                .andExpect(status().isNotFound()); // Ki·ªÉm tra status 404
    }

    /**
     * Test l·∫•y t·∫•t c·∫£ categories khi x·∫£y ra l·ªói server.
     * Ki·ªÉm tra response tr·∫£ v·ªÅ status 500 Internal Server Error.
     *
     * @throws Exception n·∫øu c√≥ l·ªói trong qu√° tr√¨nh test
     */
    @Test
    @WithMockUser(username = "testuser", authorities = {"CUSTOMER"})
    void testGetAllCategories_InternalServerError() throws Exception {
        // Arrange
        when(categoryRepository.findByParentCategoryIsNull())
                .thenThrow(new RuntimeException("Unexpected error")); // Mock l·ªói runtime

        // Act & Assert
        mockMvc.perform(get("/client-api/categories"))
                .andExpect(status().isInternalServerError()); // Ki·ªÉm tra status 500
    }
}